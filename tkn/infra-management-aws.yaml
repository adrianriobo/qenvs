---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: infra-management-aws
  labels:
    app.kubernetes.io/version: "0.0.6-dev"
  annotations:
    tekton.dev/pipelines.minVersion: "0.24.x"
    tekton.dev/categories: infrastructure
    tekton.dev/tags: infrastructure, aws
    tekton.dev/displayName: "aws manager"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: |
    This task will provision / decomission multiple environments on public cloud 

    The output will give required information to connect within the remote provisioned host
  
  params: 
  - name: project-name
    description: identifier for project. 

  - name: requestedHostID
    description: |
      this is the ID for the supported host. 
      Current values:
      * ol-rhel
      * g-macos-m1
      * s-snc
      * ol-fedora
  - name: operation 
    description: operation to execute within the infrastructure. Current values (create, destroy)
  
  # Fedora Params
  - name: fedora-version
    description: in case requestedHostID set to ol-fedora this param will control the major fedora version (i.e 37, 38,...)
    default: '38'

  # MacOS Params
  - name: macos-version
    description: in case requestedHostID set to g-macos-m1 this param will control the major macos version (i.e 12, 13,...)
    default: '13'

  # Control params
  - name: workspace-resources-path
    description: path on workspace where to store ephemeral assets related with the provisioning
  - name: remove-lock
    description: in case a previous run fails the stack can be locked. This value allows to control if remove lock
    default: 'true'

  results:
  - name: host
    description: ip to connect to the provisioned machine
  - name: username
    description: username to connect to the provisioned machine
  - name: key
    description: filename for the private key. The key is located at workspace-resources-path

  steps:
  - name: provisioner
    image: quay.io/rhqp/qenvs:v0.0.6-dev
    imagePullPolicy: Always
    script: |
      #!/bin/sh

      # Added verbosity
      set -xuo
      
      # Credentials
      export AWS_ACCESS_KEY_ID=$(cat /opt/aws-credentials/access-key)
      export AWS_SECRET_ACCESS_KEY=$(cat /opt/aws-credentials/secret-key)
      export AWS_DEFAULT_REGION=$(cat /opt/aws-credentials/region)

      # Output folder
      workspace_path=$(workspaces.pipelines-data.path)/$(params.workspace-resources-path)
      mkdir -p ${workspace_path}

      # Remove lock
      if [[ $(params.remove-lock) == "true" ]]; then
          rm -rf ${workspace_path}/.pulumi/locks/*
      fi

      # Run qenvs
      cmd="qenvs aws host $(params.operation) "
      cmd="$cmd --project-name $(params.project-name) "
      cmd="$cmd --backed-url file://${workspace_path} "
      if [[ $(params.operation) == "create" ]]; then
        cmd="$cmd --conn-details-output ${workspace_path} "
        cmd="$cmd --host-id $(params.requestedHostID) "
        # RHEL subscription information
        if test -f /opt/rh-account-secret/user; then
          cmd="$cmd --rh-subscription-username $(cat /opt/rh-account-secret/user) "  
        fi
        if test -f /opt/rh-account-secret/password; then
          cmd="$cmd --rh-subscription-password $(cat /opt/rh-account-secret/password) "
        fi
        # Fedora 
        cmd="$cmd --fedora-major-version $(params.fedora-version) "
        # MacOS
        cmd="$cmd --macos-major-version $(params.macos-version) "
        
      fi
      eval "${cmd}"
      
      create_exit_code=$?
     
      # set task results
      cat "${workspace_path}/host" | tee $(results.host.path)
      cat "${workspace_path}/username" | tee $(results.username.path)   
      echo -n "id_rsa" | tee $(results.key.path)   

      if [[ ${create_exit_code} -ne 0 ]]; then 
        exit 1
      fi

    resources:      
      requests:
        memory: "200Mi"
        cpu: "100m"
      limits:
        memory: "400Mi"
        cpu: "200m"

  workspaces:
  - name: pipelines-data
    description: volume to store outputs to connect within the target machine + state file for the infrastructure 
  - name: aws-credentials
    description: |
      ocp secret holding the aws credentials. Secret should be accessible to this task.

      To be a valid secret it should contains the following fields:
      * tenant_id
      * subscription_id
      * client_id
      * client_secret
    mountPath: /opt/aws-credentials
  - name: rh-account-secret
    description: |
      ocp secret holding the credentials for a valid rh user to subscribe VM. Secret should be accessible to this task.

      To be a valid secret it should contains the following fields:
      * user
      * password
    optional: true
    mountPath: /opt/rh-account-secret
  
      